{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { fetchUsers, langUpdate } from '../services/userService';\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    searchResults: [],\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    clearUsers: state => {\n      state.searchResults = [];\n      state.status = 'idle';\n      state.allLang = [];\n      state.error = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchUsers.pending, state => {\n      state.status = 'loading';\n      state.error = null;\n    }).addCase(langUpdate.pending, state => {\n      state.status = 'loading';\n      state.error = null;\n    }).addCase(getAllLanguages.pending, state => {\n      state.status = 'loading';\n      state.error = null;\n    }).addCase(fetchUsers.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.searchResults = action.payload;\n    }).addCase(langUpdate.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.searchResults = action.payload;\n    }).addCase(getAllLanguages.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.allLang = action.payload;\n    }).addCase(fetchUsers.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    }).addCase(langUpdate.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    }).addCase(getAllLanguages.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  clearUsers\n} = usersSlice.actions;\nexport default usersSlice.reducer;","map":{"version":3,"names":["createSlice","fetchUsers","langUpdate","usersSlice","name","initialState","searchResults","status","error","reducers","clearUsers","state","allLang","extraReducers","builder","addCase","pending","getAllLanguages","fulfilled","action","payload","rejected","actions","reducer"],"sources":["/Users/ivanishchenko/Desktop/PROGRAMING/language-exchange-frontend/src/features/usersSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport {\n    fetchUsers,\n    langUpdate,\n} from '../services/userService';\n\nconst usersSlice = createSlice({\n    name: 'users',\n    initialState: {\n        searchResults: [],\n        status: 'idle',\n        error: null,\n    },\n    reducers: {\n        clearUsers: (state) => {\n            state.searchResults = [];\n            state.status = 'idle';\n            state.allLang = [];\n            state.error = null;\n        },\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(fetchUsers.pending, (state) => {\n                state.status = 'loading';\n                state.error = null;\n            })\n            .addCase(langUpdate.pending, (state) => {\n                state.status = 'loading';\n                state.error = null;\n            })\n            \n            .addCase(getAllLanguages.pending, (state) => {\n                state.status = 'loading';\n                state.error = null;\n            })\n\n            .addCase(fetchUsers.fulfilled, (state, action) => {\n                state.status = 'succeeded';\n                state.searchResults = action.payload;\n            })\n           \n            .addCase(langUpdate.fulfilled, (state, action) => {\n                state.status = 'succeeded';\n                state.searchResults = action.payload;\n            })\n            .addCase(getAllLanguages.fulfilled, (state, action) => {\n                state.status = 'succeeded';\n                state.allLang = action.payload;\n            })\n\n            .addCase(fetchUsers.rejected, (state, action) => {\n                state.status = 'failed';\n                state.error = action.payload;\n            })\n           \n            .addCase(langUpdate.rejected, (state, action) => {\n                state.status = 'failed';\n                state.error = action.payload;\n            })\n            .addCase(getAllLanguages.rejected, (state, action) => {\n                state.status = 'failed';\n                state.error = action.payload;\n            });\n    },\n});\n\nexport const { clearUsers } = usersSlice.actions;\nexport default usersSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SACIC,UAAU,EACVC,UAAU,QACP,yBAAyB;AAEhC,MAAMC,UAAU,GAAGH,WAAW,CAAC;EAC3BI,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACVC,aAAa,EAAE,EAAE;IACjBC,MAAM,EAAE,MAAM;IACdC,KAAK,EAAE;EACX,CAAC;EACDC,QAAQ,EAAE;IACNC,UAAU,EAAGC,KAAK,IAAK;MACnBA,KAAK,CAACL,aAAa,GAAG,EAAE;MACxBK,KAAK,CAACJ,MAAM,GAAG,MAAM;MACrBI,KAAK,CAACC,OAAO,GAAG,EAAE;MAClBD,KAAK,CAACH,KAAK,GAAG,IAAI;IACtB;EACJ,CAAC;EACDK,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CACFC,OAAO,CAACd,UAAU,CAACe,OAAO,EAAGL,KAAK,IAAK;MACpCA,KAAK,CAACJ,MAAM,GAAG,SAAS;MACxBI,KAAK,CAACH,KAAK,GAAG,IAAI;IACtB,CAAC,CAAC,CACDO,OAAO,CAACb,UAAU,CAACc,OAAO,EAAGL,KAAK,IAAK;MACpCA,KAAK,CAACJ,MAAM,GAAG,SAAS;MACxBI,KAAK,CAACH,KAAK,GAAG,IAAI;IACtB,CAAC,CAAC,CAEDO,OAAO,CAACE,eAAe,CAACD,OAAO,EAAGL,KAAK,IAAK;MACzCA,KAAK,CAACJ,MAAM,GAAG,SAAS;MACxBI,KAAK,CAACH,KAAK,GAAG,IAAI;IACtB,CAAC,CAAC,CAEDO,OAAO,CAACd,UAAU,CAACiB,SAAS,EAAE,CAACP,KAAK,EAAEQ,MAAM,KAAK;MAC9CR,KAAK,CAACJ,MAAM,GAAG,WAAW;MAC1BI,KAAK,CAACL,aAAa,GAAGa,MAAM,CAACC,OAAO;IACxC,CAAC,CAAC,CAEDL,OAAO,CAACb,UAAU,CAACgB,SAAS,EAAE,CAACP,KAAK,EAAEQ,MAAM,KAAK;MAC9CR,KAAK,CAACJ,MAAM,GAAG,WAAW;MAC1BI,KAAK,CAACL,aAAa,GAAGa,MAAM,CAACC,OAAO;IACxC,CAAC,CAAC,CACDL,OAAO,CAACE,eAAe,CAACC,SAAS,EAAE,CAACP,KAAK,EAAEQ,MAAM,KAAK;MACnDR,KAAK,CAACJ,MAAM,GAAG,WAAW;MAC1BI,KAAK,CAACC,OAAO,GAAGO,MAAM,CAACC,OAAO;IAClC,CAAC,CAAC,CAEDL,OAAO,CAACd,UAAU,CAACoB,QAAQ,EAAE,CAACV,KAAK,EAAEQ,MAAM,KAAK;MAC7CR,KAAK,CAACJ,MAAM,GAAG,QAAQ;MACvBI,KAAK,CAACH,KAAK,GAAGW,MAAM,CAACC,OAAO;IAChC,CAAC,CAAC,CAEDL,OAAO,CAACb,UAAU,CAACmB,QAAQ,EAAE,CAACV,KAAK,EAAEQ,MAAM,KAAK;MAC7CR,KAAK,CAACJ,MAAM,GAAG,QAAQ;MACvBI,KAAK,CAACH,KAAK,GAAGW,MAAM,CAACC,OAAO;IAChC,CAAC,CAAC,CACDL,OAAO,CAACE,eAAe,CAACI,QAAQ,EAAE,CAACV,KAAK,EAAEQ,MAAM,KAAK;MAClDR,KAAK,CAACJ,MAAM,GAAG,QAAQ;MACvBI,KAAK,CAACH,KAAK,GAAGW,MAAM,CAACC,OAAO;IAChC,CAAC,CAAC;EACV;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEV;AAAW,CAAC,GAAGP,UAAU,CAACmB,OAAO;AAChD,eAAenB,UAAU,CAACoB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}