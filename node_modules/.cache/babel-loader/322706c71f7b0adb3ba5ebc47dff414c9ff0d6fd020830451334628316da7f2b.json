{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { fetchUsers, getMe, getAllLanguages, langUpdate } from '../services/userService';\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    list: [],\n    status: 'idle',\n    allLang: [],\n    error: null\n  },\n  reducers: {\n    clearUsers: state => {\n      state.list = [];\n      state.status = 'idle';\n      state.allLang = [];\n      state.error = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchUsers.pending, state => {\n      state.status = 'loading';\n      state.error = null;\n    }).addCase(langUpdate.pending, state => {\n      state.status = 'loading';\n      state.error = null;\n    }).addCase(getMe.pending, state => {\n      state.status = 'loading';\n      state.error = null;\n    }).addCase(getAllLanguages.pending, state => {\n      state.status = 'loading';\n      state.error = null;\n    }).addCase(fetchUsers.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.list = action.payload;\n    }).addCase(getMe.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.list = action.payload;\n    }).addCase(langUpdate.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.list = action.payload;\n    }).addCase(getAllLanguages.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.allLang = action.payload;\n    }).addCase(fetchUsers.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    }).addCase(getMe.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    }).addCase(langUpdate.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    }).addCase(getAllLanguages.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  clearUsers\n} = usersSlice.actions;\nexport default usersSlice.reducer;","map":{"version":3,"names":["createSlice","fetchUsers","getMe","getAllLanguages","langUpdate","usersSlice","name","initialState","list","status","allLang","error","reducers","clearUsers","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["/Users/ivanishchenko/Desktop/PROGRAMING/language-exchange-frontend/src/features/usersSlice.js"],"sourcesContent":["import { createSlice} from '@reduxjs/toolkit';\nimport { fetchUsers, getMe, getAllLanguages, langUpdate } from '../services/userService';\n\n\nconst usersSlice = createSlice({\n    name: 'users',\n    initialState: {\n        list: [],\n        status: 'idle',\n        allLang: [], \n        error: null,\n    },\n    reducers: {\n        clearUsers: (state) => {\n            state.list = [];\n            state.status = 'idle';\n            state.allLang = [];\n            state.error = null;\n        },\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(fetchUsers.pending, (state) => {\n                state.status = 'loading';\n                state.error = null;\n            })\n            .addCase(langUpdate.pending, (state) => {\n                state.status = 'loading';\n                state.error = null;\n            })\n            .addCase(getMe.pending, (state) => {\n                state.status = 'loading';\n                state.error = null;\n            }).addCase(getAllLanguages.pending, (state) => {\n                state.status = 'loading'\n                state.error = null;\n            })\n            \n            .addCase(fetchUsers.fulfilled, (state, action) => {\n                state.status = 'succeeded';\n                state.list = action.payload;\n            })\n            .addCase(getMe.fulfilled, (state, action) => {\n                state.status = 'succeeded';\n                state.list = action.payload;\n            })\n            .addCase(langUpdate.fulfilled, (state, action) => {\n                state.status = 'succeeded';\n                state.list = action.payload;\n            })\n            .addCase(getAllLanguages.fulfilled, (state, action) => {\n                state.status = 'succeeded';\n                state.allLang = action.payload;\n            })\n            .addCase(fetchUsers.rejected, (state, action) => {\n                state.status = 'failed';\n                state.error = action.payload;\n            })\n            .addCase(getMe.rejected, (state, action) => {\n                state.status = 'failed';\n                state.error = action.payload;\n            })\n            .addCase(langUpdate.rejected, (state, action) => {\n                state.status = 'failed';\n                state.error = action.payload;\n            })\n            .addCase(getAllLanguages.rejected, (state, action) => {\n                state.status = 'failed';\n                state.error = action.payload;\n            });\n    },\n});\n\nexport const { clearUsers } = usersSlice.actions;\nexport default usersSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}